<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="c_memory_8cpp" kind="file">
    <compoundname>cMemory.cpp</compoundname>
    <includes refid="c_memory_8h" local="yes">cMemory.h</includes>
    <incdepgraph>
      <node id="49">
        <label>cMemory.h</label>
        <link refid="c_memory_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>bmengine/cMemory.cpp</label>
        <link refid="cMemory.cpp"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>Windows.h</label>
      </node>
      <node id="53">
        <label>datatypes_Win.h</label>
        <link refid="datatypes___win_8h_source"/>
      </node>
      <node id="50">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>datatypes.h</label>
        <link refid="datatypes_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;cMemory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">cMemory::cMemory(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">cMemory::cMemory(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/>tMemSize<sp/>size,<sp/>tuInt32<sp/>align)</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>m_alignment<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>align;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>m_structAlign<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tMemSize);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>m_paddedHeadSize<sp/><sp/><sp/><sp/>=<sp/>BMAlign(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structs_block_header" kindref="compound" tooltip="Represents the header for a memory block in the BME memory manager.">sBlockHeader</ref>),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tMemSize));</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pAllocatedBlock<sp/><sp/><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allocatedSize<sp/><sp/><sp/><sp/><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>reinitialize();</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cMemory::reinitialize()</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Create<sp/>a<sp/>default<sp/>block<sp/>spanning<sp/>the<sp/>entire<sp/>pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pFirstBlock<sp/>=<sp/>(<ref refid="structs_block_header" kindref="compound" tooltip="Represents the header for a memory block in the BME memory manager.">sBlockHeader</ref>*)m_pAllocatedBlock;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>createBlock(TRUE,<sp/>m_pFirstBlock,<sp/>m_allocatedSize);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cMemory::createBlock(tBool<sp/>bFree,<sp/><ref refid="structs_block_header" kindref="compound" tooltip="Represents the header for a memory block in the BME memory manager.">sBlockHeader</ref>*<sp/>pHeader,<sp/>tMemSize<sp/>total_size)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pHeader-&gt;m_dataOffset<sp/>=<sp/>pHeader-&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">cMemory::~cMemory(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/Projects/bmengine/bmengine/cMemory.cpp"/>
  </compounddef>
</doxygen>
