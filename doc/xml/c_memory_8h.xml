<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="c_memory_8h" kind="file">
    <compoundname>cMemory.h</compoundname>
    <includes refid="platform_8h" local="yes">platform.h</includes>
    <includes refid="datatypes_8h" local="yes">datatypes.h</includes>
    <includedby refid="c_memory_8cpp" local="yes">bmengine/cMemory.cpp</includedby>
    <incdepgraph>
      <node id="55">
        <label>bmengine/cMemory.h</label>
        <link refid="cMemory.h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>Windows.h</label>
      </node>
      <node id="59">
        <label>datatypes_Win.h</label>
        <link refid="datatypes___win_8h_source"/>
      </node>
      <node id="56">
        <label>platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>datatypes.h</label>
        <link refid="datatypes_8h"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="60">
        <label>bmengine/cMemory.h</label>
        <link refid="cMemory.h"/>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>bmengine/cMemory.cpp</label>
        <link refid="c_memory_8cpp_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="c_memory_8h_1af9d1b4c55639f399f59e260f13fc64d4" prot="public" static="no">
        <name>BMAlign</name>
        <param><defname>_v</defname></param>
        <param><defname>_align</defname></param>
        <initializer>(((size_t)(_v)+(_align)-1)&amp;(~((_align)-1)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="9" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="c_memory_8h_1a6956bc3bee5a3122d4d8b65c49b56089" prot="public" static="no">
        <name>BMAlignUp</name>
        <param><defname>_v</defname></param>
        <param><defname>_align</defname></param>
        <initializer>(BMAlign((_v),(_align))+(_align))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="10" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="c_memory_8h_1ae2afc4caf1538592bc8b06ea2aa0a505" prot="public" static="no">
        <name>BMAlign16</name>
        <param><defname>_v</defname></param>
        <initializer>BMAlign(_v,16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="11" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="c_memory_8h_1a23a7659b0a3aef198ae5c6332fd2c4e5" prot="public" static="no">
        <name>BMAlign32</name>
        <param><defname>_v</defname></param>
        <initializer>BMAlign(_v,32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="12" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="c_memory_8h_1aea4ff8c3f106aa16f1e397403599a9a9" prot="public" static="no">
        <name>BMAlign64</name>
        <param><defname>_v</defname></param>
        <initializer>BMAlign(_v,64)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="13" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="c_memory_8h_1aafac14dec5845c24055e8904a7be0ca2" prot="public" static="no">
        <name>BMAlign128</name>
        <param><defname>_v</defname></param>
        <initializer>BMAlign(_v,128)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="14" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="c_memory_8h_1a4c32cfbd60c4687b409218eb904c031f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref> void *</type>
        <definition>BM_INLINE void* BMMemcpy</definition>
        <argsstring>(void *pDest, const void *pSrc, tMemSize iSize)</argsstring>
        <name>BMMemcpy</name>
        <param>
          <type>void *</type>
          <declname>pDest</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>tMemSize</type>
          <declname>iSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="18" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="17" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="c_memory_8h_1acd916ca61a650589deb6c61bfd1bbd86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref> void *</type>
        <definition>BM_INLINE void* BMMemmove</definition>
        <argsstring>(void *pDest, const void *pSrc, tMemSize iSize)</argsstring>
        <name>BMMemmove</name>
        <param>
          <type>void *</type>
          <declname>pDest</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>tMemSize</type>
          <declname>iSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="33" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="c_memory_8h_1afc25e373eda9278651e67b130c7580e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref> void *</type>
        <definition>BM_INLINE void* BMMemset</definition>
        <argsstring>(void *pSrc, int iChar, tMemSize iNum)</argsstring>
        <name>BMMemset</name>
        <param>
          <type>void *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iChar</declname>
        </param>
        <param>
          <type>tMemSize</type>
          <declname>iNum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="38" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="c_memory_8h_1a69ea579c7b4268d0c89be36949df9e40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref> int</type>
        <definition>BM_INLINE int BMMemcmp</definition>
        <argsstring>(const void *pSrc1, const void *pSrc2, tMemSize iNum)</argsstring>
        <name>BMMemcmp</name>
        <param>
          <type>const void *</type>
          <declname>pSrc1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pSrc2</declname>
        </param>
        <param>
          <type>tMemSize</type>
          <declname>iNum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="43" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="c_memory_8h_1ae629b5d84f70e05dedb45eaa8101e421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref> void *</type>
        <definition>BM_INLINE void* BMMenchr</definition>
        <argsstring>(void *pSrc, int iChar, tMemSize iNum)</argsstring>
        <name>BMMenchr</name>
        <param>
          <type>void *</type>
          <declname>pSrc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iChar</declname>
        </param>
        <param>
          <type>tMemSize</type>
          <declname>iNum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="48" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="c_memory_8h_1a87b53f8f04f9cc203aa22173a2b60c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>class BM_ALIGN_BEGIN</definition>
        <argsstring>(32) sBlockHeader</argsstring>
        <name>BM_ALIGN_BEGIN</name>
        <param>
          <type>32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Pointer to the first header block within the pool</para><para>Alignment standard for this memory manager</para><para>Alignment standard for internal structures of the manager</para><para>Resulting size of the block header after alignment with the previous standards</para><para>Size of the allocation pool</para><para>Pointer to the allocated block of memory </para>        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="57" bodyfile="D:/Projects/bmengine/bmengine/cMemory.h" bodystart="56" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="c_memory_8h_1a841f67ae4e58382e5384a08da640eef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BM_ALIGN_END</definition>
        <argsstring>(32)</argsstring>
        <name>BM_ALIGN_END</name>
        <param>
          <type>32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Projects/bmengine/bmengine/cMemory.h" line="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_CMEMORY_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_CMEMORY_H_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="platform_8h" kindref="compound" tooltip="Provides platform/compiler specific defines and includes.">platform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="datatypes_8h" kindref="compound" tooltip="Provides the directed include of abstracted dataypes.">datatypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Utility<sp/>MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMAlign(_v,<sp/>_align)<sp/><sp/><sp/><sp/><sp/>(((size_t)(_v)+(_align)-1)&amp;(~((_align)-1)))</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BMAlignUp(_v,_align)<sp/><sp/><sp/><sp/>(BMAlign((_v),(_align))+(_align))</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BMAlign16(_v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMAlign(_v,16)</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BMAlign32(_v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMAlign(_v,32)</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BMAlign64(_v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMAlign(_v,64)</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BMAlign128(_v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMAlign(_v,128)</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Memory<sp/>manipulation<sp/>Utility<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>BMMemcpy<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pDest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pSrc,<sp/>tMemSize<sp/>iSize)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>tByte*<sp/>pbDest<sp/><sp/><sp/>=<sp/>(tByte*)pDest;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>tByte*<sp/>pbSrc<sp/><sp/><sp/><sp/>=<sp/>(tByte*)pSrc;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pbSrc<sp/>&lt;<sp/>pbDest<sp/>&amp;&amp;<sp/>(pbSrc<sp/>+<sp/>iSize)<sp/>&gt;<sp/>pbDest)<sp/>||</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pbDest<sp/>&lt;<sp/>pbSrc<sp/>&amp;&amp;<sp/>(pbDest<sp/>+<sp/>iSize)<sp/>&gt;<sp/>pbSrc))</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Memory<sp/>locations<sp/>overlap,<sp/>we<sp/>should<sp/>use<sp/>memmove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BMMemmove(pDest,<sp/>pSrc,<sp/>iSize);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memcpy(pDest,<sp/>pSrc,<sp/>iSize);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>BMMemmove<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pDest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pSrc,<sp/>tMemSize<sp/>iSize)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memmove<sp/>(pDest,<sp/>pSrc,<sp/>iSize);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>BMMemset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pSrc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iChar,<sp/>tMemSize<sp/>iNum)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memset<sp/>(pSrc,<sp/>iChar,<sp/>iNum);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BMMemcmp<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pSrc1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pSrc2,<sp/>tMemSize<sp/>iNum)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memcmp<sp/>(pSrc1,<sp/>pSrc2,<sp/>iNum);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="platform_8h_1a05ade3140a6447ae3e3305fbbf2865bc" kindref="member">BM_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>BMMenchr<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pSrc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iChar,<sp/>tMemSize<sp/>iNum)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memchr<sp/>(pSrc,<sp/>iChar,<sp/>iNum);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BM_ALIGN_BEGIN(32)<sp/><ref refid="structs_block_header" kindref="compound" tooltip="Represents the header for a memory block in the BME memory manager.">sBlockHeader</ref></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>tByte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bFree;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>tByte<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bLock;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>tuInt16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_pad16;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>tMemSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_size;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>tuInt32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dataOffset;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structs_block_header" kindref="compound" tooltip="Represents the header for a memory block in the BME memory manager.">sBlockHeader</ref>*<sp/><sp/><sp/>m_pNext;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BMDEBUG</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>tuInt32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_fileLine;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>tuChar8*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_fileName;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>tuInt32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_CRC;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}BM_ALIGN_END(32);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keyword">class<sp/></highlight><highlight class="normal">BM_ALIGN_BEGIN(32)<sp/><ref refid="classc_memory" kindref="compound" tooltip="Abstracted Memory management class.">cMemory</ref></highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classc_memory" kindref="compound" tooltip="Abstracted Memory management class.">cMemory</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/>tMemSize<sp/>size,<sp/>tuInt32<sp/>align);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classc_memory" kindref="compound" tooltip="Abstracted Memory management class.">cMemory</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reinitialize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createBlock<sp/>(tBool<sp/>bFree,<sp/><ref refid="structs_block_header" kindref="compound" tooltip="Represents the header for a memory block in the BME memory manager.">sBlockHeader</ref>*<sp/>pHeader,<sp/>tMemSize<sp/>total_size);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classc_memory" kindref="compound" tooltip="Abstracted Memory management class.">cMemory</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structs_block_header" kindref="compound" tooltip="Represents the header for a memory block in the BME memory manager.">sBlockHeader</ref>*<sp/>m_pFirstBlock;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>tuInt32<sp/><sp/><sp/><sp/><sp/>m_alignment;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>tMemSize<sp/><sp/><sp/><sp/>m_structAlign;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>tMemSize<sp/><sp/><sp/><sp/>m_paddedHeadSize;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>tMemSize<sp/><sp/><sp/><sp/>m_allocatedSize;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pAllocatedBlock;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}BM_ALIGN_END(32);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_CMEMORY_H_</highlight></codeline>
    </programlisting>
    <location file="D:/Projects/bmengine/bmengine/cMemory.h"/>
  </compounddef>
</doxygen>
