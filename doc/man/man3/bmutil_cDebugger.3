.TH "bmutil::cDebugger" 3 "Tue Feb 26 2013" "Version 0.1" "Bad Monkey Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
bmutil::cDebugger \- 
.PP
Debug module driver\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <cDebugger\&.h>\fP
.PP
Inherited by \fBbmutil::cDebugger_Win\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBoutputTrace\fP (tuInt16 iLevel, const tChar8 *iFile, tMemSize iLine, const tChar8 *iMsg,\&.\&.\&.)"
.br
.RI "\fINull driver for trace output\&. \fP"
.ti -1c
.RI "void \fBsetTraceLevel\fP (tuInt16 iLevel)"
.br
.RI "\fISets the filter level for the trace module\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBcDebugger\fP * \fBGet\fP ()"
.br
.RI "\fIObtains the singleton instance of \fBcDebugger\fP\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "tuInt16 \fBm_itraceLevel\fP"
.br
.RI "\fITrace level\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Debug module driver\&. 
.PP
Definition at line 66 of file cDebugger\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBcDebugger\fP * bmutil::cDebugger::Get (void)\fC [static]\fP"

.PP
Obtains the singleton instance of \fBcDebugger\fP\&. \fBcDebugger::Get\fP
.PP
Calling this method dynamically determines the proper platform singleton to return\&. If for some reason the platform specific pointer is not available or the platform cannot be determined, the pointer to the null driver instance is returned\&.
.PP
\fBReturns:\fP
.RS 4
The pointer to the singleton instance of \fBcDebugger\fP 
.RE
.PP

.PP
Definition at line 11 of file cDebugger\&.cpp\&.
.PP
.nf
12     {
13     #if WINDOWS
14         return cDebugger_Win::Get();
15     #elif UNIX
16         return cDebugger_Unix::Get();
17     #else
18         if (NULL == sm_pinstance){sm_pinstance = new cDebugger();}
19         return sm_pinstance;
20     #endif
21     }
.fi
.SS "void bmutil::cDebugger::outputTrace (tuInt16iLevel, const tChar8 *iFile, tMemSizeiLine, const tChar8 *iMsg, \&.\&.\&.)\fC [virtual]\fP"

.PP
Null driver for trace output\&. \fBcDebugger::outputTrace\fP
.PP
Uses the ANSI C++ standard iostream functions to output trace messages to the standard stdout\&.
.PP
\fBParameters:\fP
.RS 4
\fIiLevel\fP The trace level for this message 
.br
\fIiFile\fP The file that this message originates from 
.br
\fIiLine\fP The line number of this trace message 
.br
\fIiMsg\fP The actual message contents 
.br
\fI\&.\&.\&.\fP Variable param list for values flagged in the iMsg string 
.RE
.PP

.PP
Reimplemented in \fBbmutil::cDebugger_Win\fP\&.
.PP
Definition at line 28 of file cDebugger\&.cpp\&.
.PP
.nf
29     {
30         if (iLevel < m_itraceLevel)
31         {
32             return;
33         }
34         
35         char buffer[1024];
36 
37         va_list va;
38 
39         sprintf(buffer, '%s(%d): ', iFile, iLine);
40 
41         va_start(va, iMsg);
42         vsprintf(strchr(buffer, '\0'), iMsg, va);
43         va_end(va);
44 
45         std::cout << buffer << std::endl;
46     }
.fi
.SS "void bmutil::cDebugger::setTraceLevel (tuInt16iLevel)"

.PP
Sets the filter level for the trace module\&. \fBcDebugger::setTraceLevel\fP
.PP
Trace filtering is exclusive meaning that only messages of the current trace level and higher are output\&. (i\&.e\&. if the current trace level is BM_ERR_WARNING then a message with level BM_ERR_ERROR will be output but a message of level BM_ERR_INFO will not)\&.
.PP
\fBParameters:\fP
.RS 4
\fIiLevel\fP The new trace level 
.RE
.PP

.PP
Definition at line 23 of file cDebugger\&.cpp\&.
.PP
.nf
24     {
25         this->m_itraceLevel = iLevel;
26     }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Bad Monkey Engine from the source code\&.
